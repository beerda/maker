% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/makefile.R
\name{makefile}
\alias{makefile}
\title{Generate Makefile from given list of recipes (`job`).}
\usage{
makefile(job = list(), fileName = "Makefile", makeScript = "Makefile.R",
  vars = NULL, all = TRUE, tasks = TRUE, clean = TRUE,
  makefile = TRUE)
}
\arguments{
\item{job}{A list of recipes (i.e. of instances of the S3 class `recipe` - see [recipe()])}

\item{fileName}{A file to write to. If `NULL`, the result is returned as a character vector instead of
writing to a file.}

\item{makeScript}{A name of the file that calls this function (in order to generate
the `makefile` recipe)}

\item{vars}{A named character vector of shell variables that will be declared in the resulting Makefile
(additionally to `[defaultVars]`)}

\item{all}{`TRUE` if the `all` recipe should be automatically created and added: created `all` recipe
has dependencies to all the other recipes, which causes that everything is built if `make all` is executed
in shell's command line.}

\item{tasks}{`TRUE` if "task" recipes should be automatically created and added -- see [recipe()] for
more details.}

\item{clean}{`TRUE` if the `clean` recipe should be automatically created and added}

\item{makefile}{`TRUE` if the `Makefile` recipe should be automatically created and added: this recipe
causes that any change in the R script - that generates the `Makefile` (i.e. that calls [makefile()]) -
issues the re-generation of the Makefile in the beginning of any build.}
}
\value{
If `fileName` is `NULL`, the function returns a character vector with the contents of the
Makefile.
}
\description{
In the (GNU) `make` jargon, *recipe* is an atomic build process unit. In this package, recipe
should be understood similarly: It is a command that optionally produces some files while depending
on some other files (or recipes). Moreover, a recipe may contain a command for cleanup, i.e. removal
of generated files.
}
\details{
The [makefile()] function takes a list of recipes (see [recipe()]) and generates a `Makefile` from them.
Additionally, `all` and `clean` recipes are optionally generated too.

If there is a need to group some recipes into a group, it can be done either via dependencies or by using
the `task` mechanism. Each recipe may get assigned one or more tasks (see `task` in [recipe()]). Each
task is then created as a standalone recipe depending on assigned recipes. That way, executing `make task_name`
will build all recipes with assigned task `task_name`. By default, all recipes are assigned to task `all`,
which allows `make all` to build everything.
}
\seealso{
[recipe()], [makerSkeleton()]
}
\author{
Michal Burda
}
